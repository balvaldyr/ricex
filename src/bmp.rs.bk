use palette::Rgb;
use palette::Color;
use std::fs::File;
use std::io::Bytes;
use image::Image;

pub fn bmp_decode(mut stream: Bytes<File>) -> Result<Image, &'static str> {
    let mut fs: u32 = 0;
    for i in 0.. {
        // Safety first
        let cb = match stream.next() {
            Some(Ok(d)) => d,
            _ => return Err("unexpected eof"),
        };
        if i == 2 {
            fs = cb as u32;
        }
        if i == 3 {
            fs |= (cb as u32) << 8;
        }
        if i == 4 {
            fs |= (cb as u32) << 16;
        }
        if i == 5 {
            fs |= (cb as u32) << 24;
        }
        if i == 6 {
            println!("File Size = {}", fs)
        }
        // print!("{:#x} ", cb);
    }
    println!("");

    let img = img_gen();

    return Ok(img);
}

fn img_gen() -> Image {
    let rgb_vec: Vec<Color> = vec![RED, RED, GREEN, GREEN, BLUE, BLUE, YELLOW, YELLOW];
    let im1 = Image::new(2, 4, rgb_vec);
    return im1;
}

const RED: Color = Color::Rgb(Rgb {
    red: 1.0,
    green: 0.0,
    blue: 0.0,
});
const GREEN: Color = Color::Rgb(Rgb {
    red: 0.0,
    green: 1.0,
    blue: 0.0,
});
const BLUE: Color = Color::Rgb(Rgb {
    red: 0.0,
    green: 0.0,
    blue: 1.0,
});
const YELLOW: Color = Color::Rgb(Rgb {
    red: 1.0,
    green: 1.0,
    blue: 0.0,
});
